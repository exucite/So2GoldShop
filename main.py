import asyncio

import aiogram.utils.exceptions
from aiogram import Dispatcher, Bot, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from asyncio import sleep
import paymentSystem as ps
import keyboard as kb
import config as cfg
import states
import database as db
import sqlite3

storage = MemoryStorage()
bot = Bot(cfg.TOKEN_API)
dp = Dispatcher(bot, storage=storage)

db = db.Database()
db.connection = sqlite3.connect('database.db')
db.cursor = db.connection.cursor()

async def on_startup(_):
    db.start()
    db.insert_into_settings()
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

@dp.message_handler(commands= ['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    # db.add_user(user_id,0,message.from_user.username)
    if not db.user_exists(message.from_user.id):
        start_command = message.text
        referrer_id = str(start_command[7:])
        if str(referrer_id) != "":
            if str(referrer_id) != message.from_user.id:
                db.add_user(user_id=message.from_user.id,referrer_id=referrer_id,gold=0,username=message.from_user.username)
                try:
                    await bot.send_message(chat_id=referrer_id,text="–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                except:
                    pass
            else:
                await message.answer("–ù–µ–ª—å–∑—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!")
        else:
            db.add_user(user_id=message.from_user.id,referrer_id=None,gold=0,username=message.from_user.username)

    try:
        get_chat_member = await bot.get_chat_member(chat_id=f"@{db.select_from_settings()[0][3]}",user_id=message.from_user.id)
        get_chat_member = get_chat_member['status']
    except aiogram.utils.exceptions.ChatNotFound:
        get_chat_member = 'okay'

    if get_chat_member == 'left':
        await bot.send_message(text=f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è",chat_id=message.from_user.id,reply_markup=kb.compulsory_subscribe())
    else:
        if str(user_id) in cfg.admin:
            await message.answer(text='adsa',reply_markup=kb.menu(message.from_user.id))
        else:
            await message.answer(text='–ø—Ä–∏–≤–µ—Ç, —Ç—ã –ø–æ–ø–∞–ª –≤ –≥–æ–ª–¥ —à–æ–ø', reply_markup=kb.menu(message.from_user.id))

@dp.message_handler()
async def message_handler(message: types.Message):

    try:
        get_chat_member = await bot.get_chat_member(chat_id=f"@{db.select_from_settings()[0][3]}",user_id=message.from_user.id)
        get_chat_member = get_chat_member['status']
    except aiogram.utils.exceptions.ChatNotFound:
        get_chat_member = 'okay'

    if get_chat_member == 'left':
        await bot.send_message(text=f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è",chat_id=message.from_user.id,reply_markup=kb.compulsory_subscribe())
    else:

        if message.text == "ü™ô–ö—É–ø–∏—Ç—å –∑–æ–ª–æ—Ç–æ":
            await message.answer("ü™ô–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –≤–∞–º —Å—É–º–º—É, –∞ —è —Ç–µ–º –≤—Ä–µ–º–µ–Ω–µ–º, –ø–æ—Å—á–∏—Ç–∞—é —Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –±—É–¥–µ—Ç –≤ –∑–æ–ª–æ—Ç–æ–º —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ",reply_markup=kb.back_to_menu())
            await states.PriceState.price.set()

        if message.text == 'üë§–ü—Ä–æ—Ñ–∏–ª—å':
            await message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é:\n\n–ó–æ–ª–æ—Ç–∞: {0 if db.check_profile(message.from_user.id)[0][2] is None else db.check_profile(message.from_user.id)[0][2]}\n\n–†–µ—Ñ–µ—Ä–∞–ª—ã: {len(db.select_only_referrers(message.from_user.id))}",reply_markup=kb.ref_system())

        if message.text == "üíª–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å":
            await message.answer('üíª–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:',reply_markup=kb.adm_panel(len(db.check_applications()),len(db.check_questions())))

        if message.text == 'üìÑ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
            await message.answer("üìÑ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ",reply_markup=kb.info_about_shop())

        if message.text == 'üì¶–í—ã–≤–µ—Å—Ç–∏ –∑–æ–ª–æ—Ç–æ':
            if len(db.check_withdraw_by_username(message.from_user.username)) == 1:
                await message.answer(f"–í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {db.check_withdraw_by_username(message.from_user.username)[0][4]}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É.")
            else:
                await message.answer(f"üì¶–í–∞—à –±–∞–ª–∞–Ω—Å –∑–æ–ª–æ—Ç–∞: {0 if db.check_profile(message.from_user.id)[0][2] is None else db.check_profile(message.from_user.id)[0][2]}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏: ",reply_markup=kb.back_to_menu())
                await states.GoldWithdraw.gold.set()

        if message.text == 'üé∞–ú–∏–Ω–∏-–∏–≥—Ä—ã':
            await message.answer(f'–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É –∏ –≤—ã–∏–≥—Ä–∞—Ç—å, –ª–∏–±–æ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å. –û—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É –º–æ–∂–Ω–æ –Ω–∞ –ª—é–±–æ–º –º–æ–º–µ–Ω—Ç–µ(–ø–æ—Å–ª–µ –≤—ã–±—Ä–æ—Å–∞ –∫—É–±–∏–∫–∞ —É–∂–µ –Ω–µ–ª—å–∑—è). \n–ò–≥—Ä–∞ "–ë—Ä–æ—Å—å –∫—É–±–∏–∫"\n–û–ø–∏—Å–∞–Ω–∏–µ:\n\n–ü–æ—Å–ª–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–∞–º–∏ —Å—Ç–∞–≤–∫–∏, –≤—ã –¥–æ–ª–∂–Ω—ã –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫. –ï—Å–ª–∏ –≤–∞–º –≤—ã–ø–∞–¥–µ—Ç —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ, —Ç–æ –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ —Å—Ç–∞–≤–∫—É –≤ —É–¥–≤–æ–µ–Ω–Ω–æ–º —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ. –ï—Å–ª–∏ –≤—ã–ø–∞–¥–µ—Ç –Ω–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ, —Ç–æ –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Å–≥–æ—Ä–∏—Ç –∏ –±–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–∏—Ç—Å—è –Ω–∞ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏',reply_markup=kb.mini_games())

        if message.text == '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥':
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
            await states.CheckPromo.promo.set()

        if message.text == 'üìç–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            await message.answer('üìç–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=kb.menu(message.from_user.id))

@dp.message_handler(state=states.PriceState.price)
async def get_price(message: types.Message, state: FSMContext):

    await state.update_data(price=message.text)
    data = await state.get_data()

    if '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in data['price']:
        await state.finish()
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.menu(message.from_user.id))
    elif int(data['price']) < db.select_from_settings()[0][1]:
        await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - {db.select_from_settings()[0][1]} —Ä—É–±–ª–µ–π!\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑.")
    else:
        try:
            db.insert_into_payments(user_id=message.from_user.id,username=message.from_user.username,amount=int(data['price']))
            await message.answer(f"–Ø —Ä–∞—Å—Å—á–∏—Ç–∞–ª!\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞, –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤–∞–º –∑–∞ {data['price']} —Ä—É–±–ª–µ–π: {int(float(data['price'])/db.select_from_settings()[0][0])} –∑–æ–ª–æ—Ç—ã—Ö", reply_markup=kb.payment_menu(url=ps.create_pay(amount=int(data['price']),payment=db.select_from_payments(user_id=message.from_user.id,username=None,payment_id=None,amount=None)[0][3],desc='test',method=None),payment_id=db.select_from_payments(user_id=message.from_user.id,username=None,payment_id=None,amount=None)[0][3]))
            await states.PriceState.next()
        except ValueError:
            await message.answer("–í—ã –≤–≤–æ–¥–∏—Ç–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –∫—É–ø–∏—Ç—å.")

@dp.callback_query_handler(state=states.PriceState.call)
async def wait_for_callback(callback_query: types.CallbackQuery, state: FSMContext):

    call = callback_query.data
    await state.update_data(call=call)
    data = await state.get_data()

    if 'cancel_payment_' in data['call']:
        payment_id = int(callback_query.data.split('_')[2])
        db.delete_payment(None,None,None,payment_id)
        await bot.send_message(text="–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø–ª–∞—Ç–µ–∂",chat_id=callback_query.from_user.id,reply_markup=kb.menu(callback_query.from_user.id))
        await bot.delete_message(chat_id=callback_query.from_user.id,message_id=callback_query.message.message_id)
        await state.finish()

    elif 'check_payment_' in data['call']:
        payment_id = int(callback_query.data.split('_')[2])
        transaction_status = ps.get_transaction(payment_id)['1']['transaction_status']
        print(transaction_status)

        if transaction_status in '0':
            await bot.send_message(text="–û–ø–ª–∞—Ç–∞ –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –ø—Ä–æ—à–ª–∞",chat_id=callback_query.from_user.id)
        elif transaction_status in '1':
            await bot.send_message(text="–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω",chat_id=callback_query.from_user.id)
            db.update_values(user_id=callback_query.from_user.id,gold=db.check_profile(callback_query.from_user.id)[0][2] + data['price'],username=None)
            if db.check_profile(callback_query.from_user.id)[0][1] is not None:
                db.update_values(user_id=db.check_profile(callback_query.from_user.id)[0][1],gold=db.check_profile(db.check_profile(callback_query.from_user.id)[0][1])[0][2] + data['price']-(data['price']//float(db.select_from_settings()[0][4])))
                await bot.send_message(chat_id=db.check_profile(callback_query.from_user.id)[0][1], text=f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ–ø–æ–ª–Ω–∏–ª –∑–æ–ª–æ—Ç–æ\n\n–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {data['price']-(data['price']//float(db.select_from_settings()[0][4]))}")
            else:
                pass

@dp.message_handler(state=states.PriceState.call)
async def wait_for_callback(message: types.Message, state: FSMContext):

    call = message.text
    await state.update_data(call=call)
    data = await state.get_data()
    data = data['call']

    if "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in data:
        await message.answer("–û–ø–ª–∞—Ç–∏—Ç–µ –ª–∏–±–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –ø–ª–∞—Ç–µ–∂, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    else:
        await message.answer("–û–ø–ª–∞—Ç–∏—Ç–µ –ª–∏–±–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –ø–ª–∞—Ç–µ–∂, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")

@dp.message_handler(state=states.MailingState.mailing)
async def start_mailing(message: types.Message, state: FSMContext):

    await state.update_data(mailing=message.text)
    data = await state.get_data()
    if '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in data['mailing']:
        await state.finish()
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.menu(message.from_user.id))
    else:
        for i in range(len(db.check_only_ids())):
            await bot.send_message(text=data['mailing'], chat_id=db.check_only_ids()[i][0])
        await state.finish()
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.menu(message.from_user.id))

@dp.message_handler(state=states.UpdateUserBalanceState.username)
async def destination_username(message: types.Message, state: FSMContext):

    await state.update_data(username=message.text)
    data = await state.get_data()
    if '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in data['username']:
        await state.finish()
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.menu(message.from_user.id))
    else:
        await message.answer(text='–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:')
        await states.UpdateUserBalanceState.next()

@dp.message_handler(state=states.UpdateUserBalanceState.gold)
async def balance_top_up(message: types.Message, state: FSMContext):

    await state.update_data(gold=message.text)
    data = await state.get_data()
    if '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in data['gold']:
        await state.finish()
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.menu(message.from_user.id))
    else:
        db.update_values(gold=data['gold'], username=data['username'], user_id=None)
        await state.finish()
        await message.answer(f"–ë–∞–ª–∞–Ω—Å: {data['username']} –æ–±–Ω–æ–≤–ª–µ–Ω",reply_markup=kb.menu(message.from_user.id))

@dp.message_handler(state=states.GoldWithdraw.gold)
async def gold_withdraw(message: types.Message, state: FSMContext):

    await state.update_data(gold=message.text)
    data = await state.get_data()

    if '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in data['gold']:
        await state.finish()
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.menu(message.from_user.id))
    elif db.check_profile(message.from_user.id)[0][2] < int(data['gold']):
        await message.answer("–í–∞—à –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ –≤—ã–≤–æ–¥–∏–º–æ–π –≤–∞–º–∏ —Å—É–º–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É –≤–∞—à–µ–≥–æ –≤—ã–≤–æ–¥–∞.")
    elif int(data['gold']) <= 0:
        await message.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å—É–º–º—É –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω—É—é –Ω—É–ª—é!")
    elif int(data['gold']) < int(db.select_from_settings()[0][2]):
        await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - {db.select_from_settings()[0][2] } –∑–æ–ª–æ—Ç–∞!")
    else:
        await bot.send_photo(caption=f"–ò—Ç–∞–∫, —Ç–µ–ø–µ—Ä—å –≤—ã—Å—Ç–∞–≤–∏—Ç–µ —Å–∫–∏–Ω –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É—é –ø–ª–æ—â–∞–¥–∫—É –∏–≥—Ä—ã –∑–∞ {int((float(data['gold']) * cfg.tp_procent) + float(data['gold']))} –∑–æ–ª–æ—Ç—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω", reply_markup=kb.back_to_menu(),chat_id=message.from_user.id,photo=open('img.png','rb'))
        await states.GoldWithdraw.next()

@dp.message_handler(content_types=types.ContentTypes.PHOTO, state=states.GoldWithdraw.screenshot)
async def gold_withdraw(message: types.Message, state: FSMContext):

    photo = message.photo[-1].file_id
    await state.update_data(screenshot=photo)
    data = await state.get_data()
    db.add_gold_withdraw(user_id=message.from_user.id, amount_of_gold=data['gold'],username = message.from_user.username, photo = data['screenshot'])
    application_id = db.check_withdraw_by_username(message.from_user.username)[-1][4]
    await bot.send_photo(photo=data['screenshot'],chat_id=message.from_user.id,caption=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥?\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –Ω–∞ –≤—ã–≤–æ–¥: {data['gold']}",reply_markup=kb.aproove_send_gold_withdraw(application_id))
    await state.finish()

@dp.message_handler(content_types=types.ContentTypes.TEXT,state=states.GoldWithdraw.screenshot)
async def gold_cancel_withdraw(message: types.Message, state: FSMContext):

    await state.update_data(screenshot=message.text)
    data = await state.get_data()
    if data['screenshot'] in '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await state.finish()
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.menu(message.from_user.id))

@dp.message_handler(state=states.HelpQuestion.text)
async def get_question_text(message: types.Message, state: FSMContext):

    await state.update_data(text=message.text)
    data = await state.get_data()
    if len(data['text']) < 15:
        await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 15 —Å–∏–º–≤–æ–ª–æ–≤\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ —Å–Ω–æ–≤–∞.')
    elif '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in data['text']:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=kb.menu(message.from_user.id))
        await state.finish()
    else:
        db.insert_into_questions(message.from_user.id,data['text'])
        await message.answer(f"–ù–æ–º–µ—Ä –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: {db.select_from_questions(user_id=message.from_user.id,id=None)[0][2]}\n\n–¢–µ–∫—Å—Ç –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: {db.select_from_questions(message.from_user.id,id=None)[0][1]}\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?",reply_markup=kb.aproove_send_question(db.select_from_questions(message.from_user.id,id = None)[0][2]))
        await state.finish()

@dp.message_handler(state=states.AnswerQuestion.text)
async def answer_question(message: types.Message, state: FSMContext):

    await state.update_data(text=message.text)
    data = await state.get_data()
    if "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in data['text']:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=kb.menu(message.from_user.id))
    else:
        try:
            await bot.send_message(text=f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å ID {data['id']}:\n\n{data['text']}",chat_id=db.select_from_questions(user_id=None, id=data['id'])[0][0])
            await message.answer(f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å ID {data['id']} –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            db.delete_from_questions(user_id=None,id=data['id'])
            await state.finish()
        except IndexError:
            await message.answer("–í—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É!")
            await state.finish()

@dp.message_handler(state=states.TextReview.text)
async def text_to_review(message: types.Message, state: FSMContext):

    await state.update_data(text=message.text)
    data = await state.get_data()
    if data['text'] == '–ù–µ —Ö–æ—á—É –Ω–∏—á–µ–≥–æ –ø–∏—Å–∞—Ç—å':
        await bot.send_message(text=f"{message.from_user.first_name}: –ø—Ä–æ–º–æ–ª—á–∞–ª...\n\n–í—ã–≤–µ–ª",chat_id=-1001818629572)
    await bot.send_message(text=f"{message.from_user.first_name}:{data['text']}",chat_id=-1001818629572)
    await state.finish()

@dp.message_handler(state=states.Change_Exch_Course.course)
async def change_exch_course(message: types.Message, state: FSMContext):

    await state.update_data(course=message.text)
    data = await state.get_data()
    data = data['course']
    if "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in data:
        await state.finish()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=kb.menu(message.from_user.id))
    else:
        db.update_settings(exch_rate=float(data),minimum_of_replenishment=None,minimum_of_withdraw=None,compulsory_subscribe=None,procent_of_referrer=None)
        await message.answer(f"–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {data}!",reply_markup=kb.menu(message.from_user.id))
        await state.finish()

@dp.message_handler(state=states.Change_Minimum_Of_Replenishment.number)
async def change_min_of_replenish(message: types.Message, state: FSMContext):

    await state.update_data(number=message.text)
    data = await state.get_data()
    data = data['number']
    if "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in data:
        await state.finish()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=kb.menu(message.from_user.id))
    else:
        db.update_settings(exch_rate=None,minimum_of_replenishment=int(data),minimum_of_withdraw=None,compulsory_subscribe=None,procent_of_referrer=None)
        await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {data}!",reply_markup=kb.menu(message.from_user.id))
        await state.finish()

@dp.message_handler(state=states.Change_Minimum_Of_Withdraw.number)
async def change_min_of_wihtdraw(message: types.Message, state: FSMContext):

    await state.update_data(number=message.text)
    data = await state.get_data()
    data = data['number']

    if "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in data:
        await state.finish()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=kb.menu(message.from_user.id))
    else:
        db.update_settings(exch_rate=None,minimum_of_replenishment=None,minimum_of_withdraw=int(data),compulsory_subscribe=None,procent_of_referrer=None)
        await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –∑–æ–ª–æ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {data}!", reply_markup=kb.menu(message.from_user.id))
        await state.finish()

@dp.message_handler(state=states.Change_Compulsory_Subscribe.url)
async def change_compulsory_subscribe(message: types.Message, state: FSMContext):

    await state.update_data(url=message.text)
    data = await state.get_data()
    data = data['url']

    if "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in data:
        await state.finish()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=kb.menu(message.from_user.id))
    else:
        db.update_settings(exch_rate=None,minimum_of_replenishment=None,minimum_of_withdraw=None,compulsory_subscribe=data)
        await message.answer(f'–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ <a href="https://t.me/{data}">—ç—Ç–æ—Ç</a> –∫–∞–Ω–∞–ª',parse_mode='HTML',reply_markup=kb.menu(message.from_user.id))
        await state.finish()

@dp.message_handler(state=states.ChangeProcentForReferrer.number)
async def change_procent_for_referrer(message: types.Message, state: FSMContext):

    await state.update_data(number=message.text)
    data = await state.get_data()
    data = data['number']

    if "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in data:
        await state.finish()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=kb.menu(message.from_user.id))
    else:
        db.update_settings(exch_rate=None, minimum_of_replenishment=None,minimum_of_withdraw=None, compulsory_subscribe=None,procent_of_referrer=float(data)/100)
        await message.answer(f"–ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {data}",reply_markup=kb.menu(message.from_user.id))
        await state.finish()

@dp.message_handler(state=states.AddPromo.promo)
async def add_promo(message: types.Message, state: FSMContext):

    await state.update_data(promo=message.text)
    data = await state.get_data()
    data = data['promo']

    if "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in data:
        await state.finish()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=kb.menu(message.from_user.id))
    else:
        await message.answer(f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:")
        await states.AddPromo.next()

@dp.message_handler(state=states.DeletePromo.promo)
async def delete_promo(message: types.Message, state: FSMContext):

    await state.update_data(promo=message.text)
    data = await state.get_data()

    if "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in data['promo']:
        await state.finish()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=kb.menu(message.from_user.id))
    else:
        for i in data['promos_array']:
            is_delete = False
            if i.startswith(f"{data['promo']}"):
                db.delete_promo(i[3:])
                await bot.send_message(text=f"–ü—Ä–æ–º–æ–∫–æ–¥ {i[3:]} —É–¥–∞–ª–µ–Ω",chat_id=message.from_user.id)
                is_delete = True
        if is_delete is not True:
            await bot.send_message(text="–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –µ—â–µ —Ä–∞–∑",chat_id=message.from_user.id,reply_markup=kb.back_to_menu())
        else:
            await state.finish()

@dp.message_handler(state=states.SetDice.bet_sum)
async def sum_of_bet(message: types.Message, state: FSMContext):

    await state.update_data(sum_of_bet=message.text)
    data = await state.get_data()

    if "–û—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É" in data['sum_of_bet']:
        await state.finish()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=kb.menu(message.from_user.id))
    else:
        try:
            if int(data['sum_of_bet']) > int(db.check_profile(message.from_user.id)[0][2]):
                print(data['sum_of_bet'])
                await message.answer("–í–∞—à –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –º–µ–Ω—å—à–µ, –ª–∏–±–æ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.",reply_markup=kb.cancel_dice())
            else:
                await message.answer("–¢–µ–ø–µ—Ä—å –±—Ä–æ—Å—å—Ç–µ –∫—É–±–∏–∫(–Ω–∞–ø–∏—à–∏—Ç–µ dice/–∫—É–±–∏–∫ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫—É–±–∏–∫ –≤ –ø–æ–¥—Å–∫–∞–∑–∫–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞)",reply_markup=kb.cancel_dice())
                await states.SetDice.next()
        except TypeError:
            await message.answer(
                "–í–∞—à –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –º–µ–Ω—å—à–µ, –ª–∏–±–æ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.",
                reply_markup=kb.cancel_dice())

@dp.message_handler(state=states.SetDice.dice_value,content_types=['dice'])
async def dice_value(message: types.Message, state: FSMContext):

    await state.update_data(dice_value=message.dice.value)
    data = await state.get_data()

    if int(data['dice_value']) == 5:
        await asyncio.sleep(4)
        db.update_values(user_id=message.from_user.id,gold=int(db.check_profile(message.from_user.id)[0][2]) + (float(data['sum_of_bet']) * 1.1 - float(data['sum_of_bet'])),username=None)
        await message.answer(f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {(float(data['sum_of_bet']) * 1.1 - float(data['sum_of_bet']))} –∑–æ–ª–æ—Ç—ã—Ö",reply_markup=kb.menu(message.from_user.id))
        await state.finish()
    if int(data['dice_value']) == 6:
        await asyncio.sleep(4)
        db.update_values(user_id=message.from_user.id,gold=int(db.check_profile(message.from_user.id)[0][2]) + int(data['sum_of_bet']),username=None)
        await message.answer(f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {data['sum_of_bet']} –∑–æ–ª–æ—Ç—ã—Ö",reply_markup=kb.menu(message.from_user.id))
        await state.finish()
    if int(data['dice_value']) == 3:
        await asyncio.sleep(4)
        db.update_values(user_id=message.from_user.id,gold=int(db.check_profile(message.from_user.id)[0][2]) - (int(data['sum_of_bet']) - float(data['sum_of_bet']) * 0.9),username=None)
        await message.answer(f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –í–∞—à –±–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {(int(data['sum_of_bet']) - float(data['sum_of_bet']) * 0.9)} –∑–æ–ª–æ—Ç—ã—Ö",reply_markup=kb.menu(message.from_user.id))
        await state.finish()
    if int(data['dice_value']) == 4:
        await asyncio.sleep(4)
        await message.answer(f"–ù–∏—á—å—è! –í–∞—à –±–∞–ª–∞–Ω—Å –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º",reply_markup=kb.menu(message.from_user.id))
        await state.finish()
    if int(data['dice_value']) == 1 or int(data['dice_value']) == 2:
        await asyncio.sleep(4)
        db.update_values(user_id=message.from_user.id,gold=int(db.check_profile(message.from_user.id)[0][2]) - int(data['sum_of_bet']),username=None)
        await message.answer(f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏... –í–∞—à –±–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {data['sum_of_bet']} –∑–æ–ª–æ—Ç—ã—Ö",reply_markup=kb.menu(message.from_user.id))
        await state.finish()

@dp.message_handler(state=states.AddPromo.gold)
async def add_gold_to_promo(message: types.Message,state: FSMContext):

    await state.update_data(gold=message.text)
    data = await state.get_data()

    if "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in data['gold']:
        await state.finish()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=kb.menu(message.from_user.id))
    else:
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥")
        await states.AddPromo.next()

@dp.message_handler(state=states.AddPromo.limit)
async def add_limit_to_promo(message: types.Message, state: FSMContext):

    await state.update_data(limit=message.text)
    data = await state.get_data()

    if "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in data['limit']:
        await state.finish()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=kb.menu(message.from_user.id))
    else:
        db.add_promo(promo=data['promo'],gold=data['gold'],limit=data['limit'])
        await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ {data['promo']} c –ª–∏–º–∏—Ç–æ–º {data['limit']} –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º {data['gold']} –∑–æ–ª–æ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω!")
        await  state.finish()

@dp.message_handler(state=states.CheckPromo.promo)
async def activation_promo(message: types.Message, state: FSMContext):

    await state.update_data(promo=message.text)
    data = await state.get_data()

    if "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in data['promo']:
        await state.finish()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=kb.menu(message.from_user.id))
    else:
        try:
            if len(db.select_by_promo(data['promo'])) != 0:
                if db.select_by_promo(data['promo'])[0][3] < 1:
                    await message.answer("–î–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–∞ –∞–∫—Ç–∏–≤–µ–Ω")
                    db.delete_promo(data['promo'])
                else:
                    if str(message.from_user.id) in ("" if db.select_by_promo(data['promo'])[0][2] is None else db.select_by_promo(data['promo'])[0][2]):
                        await message.answer("–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥")
                        await state.finish()
                    else:
                        await state.finish()
                        db.update_values(user_id=message.from_user.id,gold=int(db.check_profile(message.from_user.id)[0][2]) + int(db.select_by_promo(data['promo'])[0][1]),username=None)
                        await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {db.select_by_promo(data['promo'])[0][1]} –∑–æ–ª–æ—Ç—ã—Ö.")
                        db.insert_into_promo_activates(promo=data['promo'],user_id=(db.select_by_promo(data['promo'])[0][2] + f"{message.from_user.id} " if db.select_by_promo(data['promo'])[0][2] is not None else f"{message.from_user.id} "))
                        db.update_limit(limit=int(db.select_by_promo(data['promo'])[0][3]) - 1,promo=data['promo'])
                        if db.select_by_promo(data['promo'])[0][3] == 0:
                            db.delete_promo(data['promo'])
                        else:
                            pass
                        await state.finish()
            else:
                await message.answer("–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",reply_markup=kb.back_to_menu())
        except IndexError:
            await message.answer("–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",reply_markup=kb.back_to_menu())

@dp.callback_query_handler(lambda callback_query: True)
async def callback_handler(callback_query: types.CallbackQuery, state: FSMContext):

    try:
        get_chat_member = await bot.get_chat_member(chat_id=f"@{db.select_from_settings()[0][3]}",user_id=callback_query.from_user.id)
        get_chat_member = get_chat_member['status']
    except aiogram.utils.exceptions.ChatNotFound:
        get_chat_member = 'okay'

    if get_chat_member == 'left' and callback_query.data != 'check_subscribe':
        await bot.send_message(text=f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è",chat_id=callback_query.from_user.id,reply_markup=kb.compulsory_subscribe())
    else:
        if callback_query.data == 'mailing':
            await callback_query.answer()
            await bot.send_message(chat_id=callback_query.from_user.id, text='–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:',reply_markup=kb.back_to_menu())
            await states.MailingState.mailing.set()

        if callback_query.data == 'update_user_balance':
            await callback_query.answer()
            await bot.send_message(chat_id=callback_query.from_user.id, text='–ù–∞–ø–∏—à–∏ —é–∑–µ—Ä–Ω–µ–π–º —á–µ–ª–∞, –±–µ–∑ @:',reply_markup=kb.back_to_menu())
            await states.UpdateUserBalanceState.username.set()

        if callback_query.data == 'statistic':
            await callback_query.answer()
            await bot.send_message(chat_id=callback_query.from_user.id, text=f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n–ß–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {len(db.check_all())}")

        if callback_query.data.startswith('aproove_gold_no_'):
            await callback_query.answer()
            application_id = int(callback_query.data.split('_')[3])
            db.delete_withdraw(id=application_id,username=None,user_id=None)
            await bot.send_message(text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",reply_markup=kb.menu(callback_query.from_user.id),chat_id=callback_query.from_user.id)
            await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)

        if callback_query.data.startswith('aproove_gold_yes_'):
            await callback_query.answer()
            application_id = int(callback_query.data.split('_')[3])
            await bot.send_message(text=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –∏–≥—Ä–µ.\n\nID –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: {application_id}", chat_id=callback_query.from_user.id,reply_markup=kb.menu(callback_query.from_user.id))
            await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
            db.set_is_valid_withdraw_bool(bool=True, user_id=callback_query.from_user.id,username=None)
            for i in cfg.admin:
                await bot.send_message(text="–ü—Ä–∏—à–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!",chat_id=int(i))

        if callback_query.data == 'applications':
            await callback_query.answer()
            if db.check_applications():
                for i in range(len(db.check_applications())):
                    await bot.send_photo(chat_id=callback_query.from_user.id,caption=f"ID –∑–∞—è–≤–∫–∏: {db.check_applications()[i][4]}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–¥—ã –Ω–∞ –≤—ã–≤–æ–¥: {db.check_applications()[i][1]}\n–° —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏: {int((db.check_applications()[i][1] * cfg.tp_procent) + db.check_applications()[i][1])}\n\n–°–≤—è–∑—å —Å <a href='t.me/{db.check_applications()[i][2]}'>–∫–ª–∏–µ–Ω—Ç–æ–º</a>",photo=db.check_applications()[i][3],reply_markup=kb.aproove_taken_application(db.check_applications()[i][4]), parse_mode="HTML")
            else:
                await bot.send_message(chat_id=callback_query.from_user.id,text='–£–ø—Å... –ü–æ—Ö–æ–∂–µ –∑–∞—è–≤–æ–∫ –Ω–µ—Ç')

        if callback_query.data.startswith('accept_'):
            await callback_query.answer()
            application_id = int(callback_query.data.split('_')[1])
            await bot.send_message(text=f"–ó–∞—è–≤–∫–∞ —Å ID {application_id} –ø—Ä–∏–Ω—è—Ç–∞",chat_id=callback_query.from_user.id)
            await bot.send_message(chat_id=db.select_only_tg_id(application_id)[0][0], text=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å ID {application_id} –ø—Ä–∏–Ω—è—Ç–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤, –æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ –≥—Ä—É–ø–ø—É –æ—Ç–∑—ã–≤–æ–≤!",reply_markup=kb.to_reviews())
            db.update_values(user_id=db.select_only_tg_id(application_id)[0][0],username=None, gold=db.check_profile(db.select_only_tg_id(application_id)[0][0])[0][2] - db.select_only_gold_withdraw(application_id)[0][0])
            db.delete_withdraw(username=None,user_id=None,id=application_id)
            await states.TextReview.text.set()

        if callback_query.data.startswith('reject_'):
            await callback_query.answer()
            application_id = int(callback_query.data.split('_')[1])
            await bot.send_message(chat_id=db.select_only_tg_id(application_id)[0][0],text=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å ID {application_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n–í–æ–∑–º–æ–∂–Ω–æ, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—à —Å–∫–∏–Ω –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–µ, –Ω–æ –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –±–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –æ—Å—Ç–∞–ª—Å—è –≤ –ø—Ä–µ–∂–Ω–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ –µ—â–µ —Ä–∞–∑!")
            await bot.send_message(text=f"–ó–∞—è–≤–∫–∞ —Å ID {application_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", chat_id=callback_query.from_user.id)
            db.delete_withdraw(username=None, user_id=None, id=application_id)

        if callback_query.data == 'help':
            await callback_query.answer()
            await bot.edit_message_text(text="–ó–¥–µ—Å—å —è –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –≤–∞–º –Ω–∞ —á–∞—Å—Ç–æ-–∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –í–æ—Ç –∏—Ö —Å–ø–∏—Å–æ–∫, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Ü–∏—Ñ—Ä—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—Ç–≤–µ—Ç:\n\n1.—á–µ—Ç–æ —Ç–∞–º\n2.asd\n3.asd\n4.asd\n\n–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–æ –æ—Ç–≤–µ—Ç —Å–∏–ª—å–Ω–æ –∑–∞–¥–µ—Ä–∂–∏—Ç—Å—è.",message_id=callback_query.message.message_id,chat_id=callback_query.message.chat.id,reply_markup=kb.help_menu())

        if callback_query.data == 'answer_1':
            await callback_query.answer()
            await bot.edit_message_text(text='–ø–æ—Ç–æ–º—É —á—Ç–æ', chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id,reply_markup=kb.back_to_help_menu())

        if callback_query.data == 'answer_2':
            await callback_query.answer()
            await bot.edit_message_text(text='–ø–æ—Ç–æ–º—É —á—Ç–æ', chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id,reply_markup=kb.back_to_help_menu())

        if callback_query.data == 'ansnwer_3':
            await callback_query.answer()
            await bot.edit_message_text(text='–ø–æ—Ç–æ–º—É —á—Ç–æ', chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id,reply_markup=kb.back_to_help_menu())

        if callback_query.data == 'answer_4':
            await callback_query.answer()
            await bot.edit_message_text(text='–ø–æ—Ç–æ–º—É —á—Ç–æ', chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id,reply_markup=kb.back_to_help_menu())

        if callback_query.data == 'to_helpers':
            await callback_query.answer()
            await bot.send_message(text="–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —á–µ—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–º–æ–≥–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–≥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ:", chat_id=callback_query.message.chat.id,reply_markup=kb.back_to_menu())
            await states.HelpQuestion.text.set()

        if callback_query.data.startswith('question_send_accept_'):
            await callback_query.answer()
            question_id = callback_query.data.split('_')[3]
            # db.set_valid_question(question_id)
            await bot.send_message(text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",chat_id=callback_query.from_user.id)

        if callback_query.data.startswith('question_send_reject_'):
            await callback_query.answer()
            question_id = callback_query.data.split('_')[3]
            db.delete_from_questions(callback_query.from_user.id,question_id)
            await bot.send_message(text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.",chat_id=callback_query.from_user.id)

        if callback_query.data == 'questions':
            await callback_query.answer()
            if db.check_questions():
                for i in db.check_questions():
                    await bot.send_message(text=f"ID –í–æ–ø—Ä–æ—Å–∞: {i[2]}\n\n–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏: {i[1]}",chat_id=callback_query.from_user.id,reply_markup=kb.aproove_taken_question(i[2]))
            else:
                await bot.send_message(chat_id=callback_query.from_user.id,text='–£–ø—Å... –ü–æ—Ö–æ–∂–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç')
            await callback_query.answer()

        if callback_query.data.startswith('taken_question_reject_'):
            await callback_query.answer()
            question_id = callback_query.data.split('_')[3]
            db.delete_from_questions(user_id=None,id=question_id)
            await bot.send_message(text=f"–ó–∞—è–≤–∫–∞ —Å ID {question_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",chat_id=callback_query.from_user.id)

        if callback_query.data.startswith('taken_question_answer_'):
            await callback_query.answer()
            question_id = callback_query.data.split('_')[3]
            await bot.send_message(text="–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:",chat_id=callback_query.from_user.id)
            await states.AnswerQuestion.text.set()
            await state.update_data(id=question_id)

        if callback_query.data == 'change_exch_course':
            await callback_query.answer()
            await bot.send_message(text="–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –≤ –≤–∏–¥–µ –¥—Ä–æ–±–∏(–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5 –∏–ª–∏ 0.4):",chat_id=callback_query.from_user.id,reply_markup=kb.back_to_menu())
            await states.Change_Exch_Course.course.set()

        if callback_query.data == 'change_minimum_of_replenish':
            await callback_query.answer()
            await bot.send_message(text="–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",chat_id=callback_query.from_user.id,reply_markup=kb.back_to_menu())
            await states.Change_Minimum_Of_Replenishment.number.set()

        if callback_query.data == 'change_minimum_of_withdraw':
            await callback_query.answer()
            await bot.send_message(text="–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",chat_id=callback_query.from_user.id,reply_markup=kb.back_to_menu())
            await states.Change_Minimum_Of_Withdraw.number.set()

        if callback_query.data == 'info_about_settings':
            await callback_query.answer()
            await bot.send_message(text=f"–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ –∑–æ–ª–æ—Ç–∞ - {db.select_from_settings()[0][0]}\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - {db.select_from_settings()[0][1]}\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - {db.select_from_settings()[0][2]}",chat_id=callback_query.from_user.id)

        if callback_query.data == 'change_compulsory_subscribe':
            await callback_query.answer()
            await bot.send_message(text="–ù–∞–ø–∏—à–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –±–µ–∑ https –∏ @(–Ω–∞–ø—Ä–∏–º–µ—Ä standoff_reviews):",chat_id=callback_query.from_user.id,reply_markup=kb.back_to_menu())
            await states.Change_Compulsory_Subscribe.url.set()

        if callback_query.data == 'change_procent_for_referrer':
            await callback_query.answer()
            await bot.send_message(text="–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ–ø –ø–æ–∫—É–ø–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞(–ø–∏—Å–∞—Ç—å –±–µ–∑ %. –ù–∞–ø—Ä–∏–º–µ—Ä - 20 –∏–ª–∏ 10)",chat_id=callback_query.from_user.id, reply_markup=kb.back_to_menu())
            await states.ChangeProcentForReferrer.number.set()

        if callback_query.data == 'promo':
            await callback_query.answer()
            await bot.edit_message_text(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤",chat_id=callback_query.message.chat.id,message_id=callback_query.message.message_id,reply_markup=kb.promos())

        if callback_query.data == 'check_all_promos':
            await callback_query.answer()
            promos = db.select_from_promos(as_array=False)
            promos_as_text = ""
            if len(promos) != 0:
                for i in promos:
                    promos_as_text += f"{i[0]} | {i[1]} | {i[3]}\n"
                await bot.send_message(text=f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n\n{promos_as_text}",chat_id=callback_query.from_user.id)
            else:
                await bot.send_message(text="–ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç",chat_id=callback_query.from_user.id)

        if callback_query.data == 'add_promo':
            await callback_query.answer()
            await bot.send_message(text="–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:",chat_id=callback_query.from_user.id,reply_markup=kb.back_to_menu())
            await states.AddPromo.promo.set()

        if callback_query.data == 'delete_promo':
            await callback_query.answer()
            promos = db.select_from_promos(as_array=False)
            promos_as_text = ""
            promos_as_array = []
            if len(promos) != 0:
                count = 1
                for i in promos:
                    print(i)
                    promos_as_text += f"{count}. {i[0]}\n"
                    promos_as_array.append(f"{count}. {i[0]}")
                    count += 1
                await bot.send_message(text=f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n\n{promos_as_text}",
                                       chat_id=callback_query.from_user.id)
                await states.DeletePromo.promos_array.set()
                await state.update_data(promos_array=promos_as_array)
                await state.get_data()
                await bot.send_message(text="–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –ø—Ä–æ–º–æ–∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",chat_id=callback_query.from_user.id,reply_markup=kb.back_to_menu())
                await states.DeletePromo.next()
            else:
                await bot.send_message(text="–ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç", chat_id=callback_query.from_user.id)

        if callback_query.data == 'delete_all_promos':
            await callback_query.answer()
            db.delete_all_promos()
            await bot.send_message(chat_id=callback_query.from_user.id,text="–í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã")

        if callback_query.data == 'back_to_help_menu':
            await callback_query.answer()
            await bot.edit_message_text(message_id=callback_query.message.message_id, chat_id=callback_query.from_user.id, text="–ó–¥–µ—Å—å —è –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –≤–∞–º –Ω–∞ —á–∞—Å—Ç–æ-–∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –í–æ—Ç –∏—Ö —Å–ø–∏—Å–æ–∫, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Ü–∏—Ñ—Ä—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—Ç–≤–µ—Ç:\n\n1.—á–µ—Ç–æ —Ç–∞–º\n2.asd\n3.asd\n4.asd\n\n–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–æ –æ—Ç–≤–µ—Ç —Å–∏–ª—å–Ω–æ –∑–∞–¥–µ—Ä–∂–∏—Ç—Å—è.",reply_markup=kb.help_menu())

        if callback_query.data == 'ref_system':
            await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, text=f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/{cfg.BOT_NICNAME}?start={callback_query.from_user.id}\n\n–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:\n\n–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, —Ç–æ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç. –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ.",reply_markup=kb.back_to_profile())

        if callback_query.data == 'back_to_profile':
            await bot.edit_message_text(chat_id=callback_query.from_user.id,message_id=callback_query.message.message_id, text=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é:\n\n–ó–æ–ª–æ—Ç–∞: {0 if db.check_profile(callback_query.from_user.id)[0][2] is None else db.check_profile(callback_query.from_user.id)[0][2]}\n\n–†–µ—Ñ–µ—Ä–∞–ª—ã: {len(db.select_only_referrers(callback_query.from_user.id))}",reply_markup=kb.ref_system())

        if callback_query.data == 'throw_dice':
            await bot.send_message(chat_id=callback_query.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",reply_markup=kb.cancel_dice())
            await states.SetDice.bet_sum.set()

    if callback_query.data == 'check_subscribe':
        await callback_query.answer()
        get_chat_member = await bot.get_chat_member(chat_id=f"@{db.select_from_settings()[0][3]}",user_id=callback_query.from_user.id)
        get_chat_member = get_chat_member['status']

        if get_chat_member == 'left':
            await bot.send_message(text="–í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!",chat_id=callback_query.from_user.id)
        else:
            await bot.send_message(text="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º",reply_markup=kb.back_to_menu(),chat_id=callback_query.from_user.id)

if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)